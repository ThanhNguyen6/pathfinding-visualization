{"version":3,"sources":["components/Pathfinding/Node/Node.js","components/Logo/path-icon-png-29.jpg","components/Logo/Logo.js","components/Pathfinding/algorithms/dijkstra.js","components/Navigation/Navigation.js","components/Pathfinding/algorithms/BFS.js","components/Pathfinding/algorithms/DFS.js","components/Pathfinding/Pathfinding.js","App.js","reportWebVitals.js","index.js"],"names":["Node","this","props","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","id","className","Component","Logo","style","height","width","paddingTop","alt","src","logo","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","speed","changeSpeed","sp","animate","nodesInShortestPathOrder","i","setTimeout","nodeClassName","document","getElementById","animateShortestPath","algo","clearGrid","state","newGrid","slice","distanceToFinishNode","Math","abs","finishNodeRow","finishNodeCol","isNode","Navigation","currentGrid","Navbar","expand","bg","variant","Brand","href","Toggle","aria-controls","Collapse","Nav","Link","onClick","NavDropdown","title","Item","al","startNodeRow","startNodeCol","nextNodesStack","currentNode","nextNode","bfs","pop","dfs","unshift","getNodesInShortestPathOrder","visualize","createNode","getNewGridWithWallToggled","newNode","Pathfinding","mouseIsPressed","currentRow","getInitialGrid","setState","map","rowIdx","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.a6dc8b79.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './Node.css';\n\nclass Node extends Component {\n  render() {\n    const {\n      col,\n      isFinish,\n      isStart,\n      isWall,\n      onMouseDown,\n      onMouseEnter,\n      onMouseUp,\n      row,\n    } = this.props;\n    const extraClassName = isFinish\n      ? 'node-finish'\n      : isStart\n      ? 'node-start'\n      : isWall\n      ? 'node-wall'\n      : '';\n\n    return (\n      <div\n        id={`node-${row}-${col}`}\n        className={`node ${extraClassName}`}\n        onMouseDown={() => onMouseDown(row, col)}\n        onMouseEnter={() => onMouseEnter(row, col)}\n        onMouseUp={() => onMouseUp()}></div>\n    );\n  }\n}\n\nexport default Node;","export default __webpack_public_path__ + \"static/media/path-icon-png-29.b8d88f9c.jpg\";","import React from 'react';\nimport Tilt from 'react-parallax-tilt';\nimport './Logo.css'\nimport logo from './path-icon-png-29.jpg'\n\nconst Logo = () => {\n    return (\n        <div className='ma4 mt0'>\n            <Tilt className=\"Tilt br2  shadow-2\" style={{ height: '50px', width: '50px' }} >\n                <div className=\"Tilt-inner pa3\"> \n                    <img style={{paddingTop: '5px'}} alt='logo' src={logo}></img> \n                </div>\n            </Tilt>\n        </div>\n    );\n}\n\nexport default Logo;","// Returns all nodes in the order in which they were visited.\n// Make nodes point back to their previous node so that we can compute the shortest path\n// by backtracking from the finish node.\n\nexport function dijkstra(grid, startNode, finishNode) {\n    const visitedNodesInOrder = [];\n    startNode.distance = 0;\n    const unvisitedNodes = getAllNodes(grid); // Q: different from using grid or slice of grid???\n  \n    while (unvisitedNodes.length) {\n      sortNodesByDistance(unvisitedNodes);\n      const closestNode = unvisitedNodes.shift();\n      // If we encounter a wall, we skip it.\n      if (!closestNode.isWall) {\n        // If the closest node is at a distance of infinity,\n        // we must be trapped and should stop.\n        if (closestNode.distance === Infinity) return visitedNodesInOrder;\n        closestNode.isVisited = true;\n        visitedNodesInOrder.push(closestNode);\n        if (closestNode === finishNode) return visitedNodesInOrder;\n        updateUnvisitedNeighbors(closestNode, grid);\n      }\n    }\n  }\n  \n  function getAllNodes(grid) {\n    const nodes = [];\n    for (const row of grid) {\n      for (const node of row) {\n        nodes.push(node);\n      }\n    }\n    return nodes;\n  }\n  \n  function sortNodesByDistance(unvisitedNodes) {\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n  }\n  \n  function updateUnvisitedNeighbors(node, grid) {\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n    for (const neighbor of unvisitedNeighbors) {\n      neighbor.distance = node.distance + 1;\n      neighbor.previousNode = node;\n    }\n  }\n  \n  function getUnvisitedNeighbors(node, grid) {\n    const neighbors = [];\n    const {col, row} = node;\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n    return neighbors.filter(neighbor => !neighbor.isVisited);\n  }","import React from 'react';\nimport { Nav, NavDropdown, Navbar} from 'react-bootstrap';\nimport Logo from '../Logo/Logo';\nimport './Navigation.css'\nimport { dijkstra } from '../Pathfinding/algorithms/dijkstra.js';\n//import { AStar } from '../Pathfinding/algorithms/AStar.js';\nimport { bfs } from '../Pathfinding/algorithms/BFS.js';\nimport { dfs } from '../Pathfinding/algorithms/DFS.js';\n\n\nvar speed = 15;\nfunction changeSpeed(sp) {\n    switch(sp) {\n        case \"slow\":\n            speed = 100;\n            break;\n        case \"fast\":\n            speed = 5;\n            break;\n        case \"average\":\n            speed = 50;\n            break;\n        default:\n            speed = 15;\n            break;\n    }\n}\nfunction animate(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n        if (i === visitedNodesInOrder.length) {\n            setTimeout(() => {\n                animateShortestPath(nodesInShortestPathOrder);\n            }, speed * i);\n            return;\n        }\n        setTimeout(() => {\n            const node = visitedNodesInOrder[i];\n            const nodeClassName = document.getElementById(`node-${node.row}-${node.col}`,).className;\n            if (nodeClassName !== 'node node-start' && nodeClassName !== 'node node-finish') {\n                document.getElementById(`node-${node.row}-${node.col}`).className ='node node-visited';\n            }\n        }, speed * i);\n    }\n}\n  \nfunction animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n        setTimeout(() => {\n            const node = nodesInShortestPathOrder[i];\n            const nodeClassName = document.getElementById(`node-${node.row}-${node.col}`,).className;\n            if (nodeClassName !== 'node node-start' && nodeClassName !== 'node node-finish') {\n                document.getElementById(`node-${node.row}-${node.col}`).className ='node node-shortest-path';\n            }\n        }, i * 40);\n    }\n}\n\nvar algo = \"DFG\";\nfunction changeAlgo(algorithm) {\n    algo = algorithm;\n}\n\nfunction visualize(currentGrid, state, al) {\n    clearGrid(currentGrid)\n    const {grid} = currentGrid;\n    const startNode = grid[state.startNodeRow][state.startNodeCol];\n    const finishNode = grid[state.finishNodeRow][state.finishNodeCol];\n    var visitedNodesInOrder= [];\n    switch (al) {\n        case \"Dijkstra\":\n            visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n            break;  \n        /*case \"AStar\":\n            visitedNodesInOrder = AStar(grid, startNode, finishNode);\n             break;\n            */\n        case \"BFS\":\n            visitedNodesInOrder = bfs(grid, startNode, finishNode);\n            break;\n        case \"DFS\":\n            visitedNodesInOrder = dfs(grid, startNode, finishNode);\n            break;\n        default:\n            // should never get here\n            break;\n    }    \n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    animate(visitedNodesInOrder, nodesInShortestPathOrder);\n}\n\nfunction getNodesInShortestPathOrder(finishNode) {\n    const nodesInShortestPathOrder = [];\n    let currentNode = finishNode;\n    while (currentNode !== null) {\n      nodesInShortestPathOrder.unshift(currentNode);\n      currentNode = currentNode.previousNode;\n    }\n    return nodesInShortestPathOrder;\n}\n\nfunction clearGrid(state) {\n    const newGrid = state.grid.slice();\n    for (const row of newGrid) {\n        for (const node of row) {\n            let nodeClassName = document.getElementById(`node-${node.row}-${node.col}`,).className;\n            if (\n                nodeClassName !== 'node node-start' &&\n                nodeClassName !== 'node node-finish' &&\n                nodeClassName !== 'node node-wall'\n            ) {\n                document.getElementById(`node-${node.row}-${node.col}`).className ='node';\n                node.isVisited = false;\n                node.distance = Infinity;\n                node.distanceToFinishNode = Math.abs(state.finishNodeRow - node.row) + Math.abs(state.finishNodeCol - node.col);\n            }\n            if (nodeClassName === 'node node-finish') {\n                node.isVisited = false;\n                node.distance = Infinity;\n                node.distanceToFinishNode = 0;\n            }\n            if (nodeClassName === 'node node-start') {\n                node.isVisited = false;\n                node.distance = Infinity;\n                node.distanceToFinishNode = Math.abs(state.finishNodeRow - node.row) + Math.abs(state.finishNodeCol - node.col);\n                node.isStart = true;\n                node.isWall = false;\n                node.previousNode = null;\n                node.isNode = true;\n            }\n        }\n    }\n}\n\n\nconst Navigation = ({currentGrid, state}) => {\n    return (\n        <div>\n            <Navbar id=\"nav\" expand=\"sm\" bg=\"dark\" variant=\"dark\">\n                <Navbar.Brand href=\"#home\">Pathfinding Visualizer\n                <Logo/>\n                </Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                <Navbar.Collapse id=\"basic-navbar-nav\">\n                    <Nav className=\"mr-auto\">\n                        <Nav.Link onClick={() => clearGrid(state)}> Clear Board </Nav.Link>\n                        {/*<Nav.Link  Add Random Wall </Nav.Link>\n                        <Nav.Link> Clear Path </Nav.Link>*/}\n                        <NavDropdown title=\"Algorithms\" id=\"basic-nav-dropdown\">\n                            {/*<NavDropdown.Item href=\"#Dijkstra\" onClick={() => changeAlgo(\"Dijkstra\")} >Dijkstra's Algorithm</NavDropdown.Item>*/}\n                            {/*<NavDropdown.Item href=\"#AStar\" onClick={() => changeAlgo(\"AStar\")} >A* Algorithm </NavDropdown.Item>*/}\n                            {/*<NavDropdown.Item href=\"#BFS\" onClick={() => changeAlgo(\"BFS\")} >Breath-First Search</NavDropdown.Item>*/}\n                            <NavDropdown.Item href=\"#DFS\" onClick={() => changeAlgo(\"DFS\")}>Depth-First Search</NavDropdown.Item>\n                            {/*<NavDropdown.Item \">Gready</NavDropdown.Item>\n                            */}\n                        </NavDropdown>\n                        <NavDropdown title=\"Speed\" id=\"basic-nav-dropdown\">\n                            <NavDropdown.Item href=\"#slow\" onClick={() => changeSpeed(\"slow\")}>Slow</NavDropdown.Item>\n                            <NavDropdown.Item href=\"#average\" onClick={() => changeSpeed(\"average\")}>Average</NavDropdown.Item>\n                            <NavDropdown.Item href=\"#fast\" onClick={() => changeSpeed(\"fast\")}>Fast</NavDropdown.Item>\n                        </NavDropdown>\n                        <Nav.Link href=\"#visualize\" bg=\"primary\" variant=\"primary\" onClick={() => visualize(currentGrid, state, algo)}> Visualize </Nav.Link>\n                    </Nav>\n                </Navbar.Collapse>\n            </Navbar>\n        </div>\n    );\n}\n\nexport default Navigation;","export function bfs(grid, startNode, finishNode) {\n    const visitedNodesInOrder = [];\n    let nextNodesStack = [startNode];\n    while (nextNodesStack.length) {\n        const currentNode = nextNodesStack.shift();\n        if (currentNode === finishNode) return visitedNodesInOrder;\n        if (!currentNode.isWall && (currentNode.isStart || !currentNode.isVisited)) {\n            currentNode.isVisited = true;\n            visitedNodesInOrder.push(currentNode);\n            const {col, row} = currentNode;\n            let nextNode;\n            if (row > 0) {\n                nextNode = grid[row - 1][col];\n                if (!nextNode.isVisited) {\n                    nextNode.previousNode = currentNode;\n                    nextNodesStack.push(nextNode);\n                }\n            }\n            if (row < grid.length - 1) {\n                nextNode = grid[row + 1][col];\n                if (!nextNode.isVisited) {\n                    nextNode.previousNode = currentNode;\n                    nextNodesStack.push(nextNode);\n                }\n            }\n            if (col > 0) {\n                nextNode = grid[row][col - 1];\n                if (!nextNode.isVisited) {\n                    nextNode.previousNode = currentNode;\n                    nextNodesStack.push(nextNode);\n                }     \n            }\n            if (col < grid[0].length - 1) {\n                nextNode = grid[row][col + 1];\n                if (!nextNode.isVisited) {\n                    nextNode.previousNode = currentNode;\n                    nextNodesStack.push(nextNode);\n                }\n            }\n        }\n    }\n    // return visitedNodesInOrder;\n}","export function dfs(grid, startNode, finishNode) {\n    const visitedNodesInOrder = [];\n    const nextNodesStack = [];\n    nextNodesStack.push(startNode);\n    while (nextNodesStack.length) {\n        const currentNode = nextNodesStack.pop();\n        if (currentNode === finishNode) {\n            return visitedNodesInOrder;\n        }\n  \n        if (!currentNode.isWall && (currentNode.isStart || !currentNode.isVisited)) {\n            currentNode.isVisited = true;\n            visitedNodesInOrder.push(currentNode);\n  \n            const {col, row} = currentNode;\n            let nextNode;\n            if (row > 0) {\n                nextNode = grid[row - 1][col];\n                if (!nextNode.isVisited) {\n                    nextNode.previousNode = currentNode;\n                    nextNodesStack.push(nextNode);\n                }\n            }\n            if (row < grid.length - 1) {\n                nextNode = grid[row + 1][col];\n                if (!nextNode.isVisited) {\n                    nextNode.previousNode = currentNode;\n                    nextNodesStack.push(nextNode);\n                }\n            }\n            if (col > 0) {\n                nextNode = grid[row][col - 1];\n                if (!nextNode.isVisited) {\n                    nextNode.previousNode = currentNode;\n                    nextNodesStack.push(nextNode);\n                }\n            }\n            if (col < grid[0].length - 1) {\n                nextNode = grid[row][col + 1];\n                if (!nextNode.isVisited) {\n                    nextNode.previousNode = currentNode;\n                    nextNodesStack.push(nextNode);\n                }\n            }\n        }\n    }\n}\n  ","import React, {Component} from 'react';\nimport Node from './Node/Node';\nimport Navigation from '../Navigation/Navigation';\n\nimport './Pathfinding.css';\n\nconst START_NODE_ROW = 15;\nconst START_NODE_COL = 5;\nconst FINISH_NODE_ROW = 5;\nconst FINISH_NODE_COL = 35;\nconst MAX_ROW = 20;\nconst MAX_COLUMN = 50;\n\nconst getInitialGrid = () => {\n    const grid = [];\n    for (let row = 0; row < MAX_ROW; row++) {\n        const currentRow = [];\n        for (let col = 0; col < MAX_COLUMN; col++) {\n            currentRow.push(createNode(col, row));\n        }\n        grid.push(currentRow);\n    }\n    return grid;\n};\n  \nconst createNode = (col, row) => {\n    return {\n        col,\n        row,\n        isStart: row === START_NODE_ROW && col === START_NODE_COL,\n        isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n        distance: Infinity,\n        distanceToFinishNode: Math.abs(FINISH_NODE_ROW - row) + Math.abs(FINISH_NODE_COL - col),\n        isVisited: false,\n        isWall: false,\n        previousNode: null,\n    };\n};\n  \nconst getNewGridWithWallToggled = (grid, row, col) => {\n    const newGrid = grid.slice();\n    const node = newGrid[row][col];\n    const newNode = {\n        ...node,\n        isWall: !node.isWall,\n    };\n    newGrid[row][col] = newNode;\n    return newGrid;\n};\n  \nclass Pathfinding extends Component {\n    constructor() {\n        super();\n        this.state = {\n            grid:[],\n            mouseIsPressed:false,\n            startNodeCol: START_NODE_COL,\n            startNodeRow: START_NODE_ROW,\n            finishNodeCol: FINISH_NODE_COL,\n            finishNodeRow: FINISH_NODE_ROW,\n        }\n    } \n    \n    componentDidMount() {\n        const grid = getInitialGrid();\n        this.setState({grid});\n    }\n    \n    handleMouseDown(row, col) {\n        const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n        this.setState({grid: newGrid, mouseIsPressed: true});\n    }\n    \n    handleMouseEnter(row, col) {\n        if (!this.state.mouseIsPressed) return;\n        const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n        this.setState({grid: newGrid});\n    }\n    \n    handleMouseUp() {\n        this.setState({mouseIsPressed: false});\n    }\n\n\n\n    render() {\n        const {grid, mouseIsPressed} = this.state;\n        return (\n            <div>\n                <Navigation currentGrid={{grid}} state={this.state}/>\n                <div className=\"grid\">\n                    {grid.map((row, rowIdx) => {\n                    return (\n                        <div key={rowIdx}>\n                        {row.map((node, nodeIdx) => {const {row, col, isFinish, isStart, isWall} = node;\n                            return (\n                                <Node\n                                key={nodeIdx}\n                                col={col}\n                                isFinish={isFinish}\n                                isStart={isStart}\n                                isWall={isWall}\n                                mouseIsPressed={mouseIsPressed}\n                                onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                                onMouseEnter={(row, col) => this.handleMouseEnter(row, col)}\n                                onMouseUp={() => this.handleMouseUp()}\n                                row={row}></Node>\n                            );\n                        })}\n                        </div>\n                    );\n                })}\n                </div>\n            </div>\n        );\n      }\n    \n}\n\nexport default Pathfinding;","import React, { Component } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Pathfinding from './components/Pathfinding/Pathfinding';\n\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Pathfinding/>\n      </div>\n    );\n  }\n  \n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}